@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<style>
    .toolbar {
    position: fixed;
    bottom: 100px;
    font-weight: 500;
    display: flex;
    flex-direction: column;
    gap: 3rem;
}

    .toolbar.right {
        left: 50px;
        width: 0;
        display: flex;
        flex-direction: column;
        gap: 3rem;
    }

.toolbar__icons {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: -140px;
    transform:translateX(-1rem);
}

    .toolbar__icons > *:hover {
        color: var(--color-signal);
        transition: all 0.2s ease-in-out;
        transform: scale(1.2);
    }

    .toolbar__icons > * {
        transition: all 0.2s ease-in-out;
        color: var(--color-text);
    }

.toolbar::after {
    content: "";
    display: block;
    width: 2px;
    height: 100px;
    margin: 0px auto;
    background-color: var(--color-text);
    position: relative;
    bottom: -160px;
}

@@media(max-width: 800px) {
    .toolbar {
        display: none;
    }
}

</style>

<div class="toolbar right">
    <div class="toolbar__icons">
        <AuthorizeView>
            <Authorized>
                <form action="Account/Logout" method="post" class="">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="" style="all: unset; cursor: pointer">
                        Logout
                    </button>
                </form>
                <div class="">
                    <a href="Account/Manage">@context.User.Identity?.Name</a>
                </div>
            </Authorized>
            <NotAuthorized>
                <a href="Account/Login" class="">
                    Login
                </a>
                <a href="Account/Register" class="">
                    Register
                </a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
